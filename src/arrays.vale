
struct StaticSizedArrayIter<N, M, V, E> where E Ref {
  arr &[#N]<M, V>E;
  pos! int;
}

fn begin<N, M, V, E>(arr &[#N]<M, V>E) StaticSizedArrayIter<N, M, V, E> {
  StaticSizedArrayIter<N, M, V, E>(arr, 0)
}

fn next<N, M, V, E>(iter &!StaticSizedArrayIter<N, M, V, E>) Opt<&E> {
  if iter.pos < iter.arr.len() {
    Some<&E>(&iter.arr[set iter.pos = iter.pos + 1])
  } else {
    None<&E>()
  }
}


struct RuntimeSizedArrayIter<M, E> where E Ref {
  arr &[]<M>E;
  pos! int;
}

fn begin<M, E>(arr &[]<M>E) RuntimeSizedArrayIter<M, E> {
  RuntimeSizedArrayIter<M, E>(arr, 0)
}

fn next<M, E>(iter &!RuntimeSizedArrayIter<M, E>) Opt<&E> {
  if iter.pos < iter.arr.len() {
    Some<&E>(&iter.arr[set iter.pos = iter.pos + 1])
  } else {
    None<&E>()
  }
}
