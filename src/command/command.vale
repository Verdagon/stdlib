import stdlib.stringutils.*;
import stdlib.path.*;
import stdlib.os.*;

export Array<imm, final, str> as StrArray;
export Array<mut, vary, str> as MutStrArray;

struct Subprocess {
  command str;
  handle i64;
}

fn Subprocess(command str) Result<Subprocess, str> {
  list! = command.split(" ");
  cmd = str(list.get(0));
  newlist! = List<StrSlice>();
  enumerate(&list, (element, index){
    if (index != 0) { newlist!.add(list.get(index)); }
  });
  ret Subprocess(cmd, &newlist);
}

fn Subprocess(command str, args &List<str>) Result<Subprocess, str> {
  newlist! = List<StrSlice>();
  each (&args) (element){
    newlist!.add(slice(element));
  }
  ret Subprocess(command, &newlist);
}

fn FindProgramInPath(relative_program str) Opt<Path> {
  path_env_var = get_env_var("PATH");
  paths = path_env_var.split(GetEnvPathSeparator());
  println("path_env_var {path_env_var}");
  if (paths.len() > 0) {
    println("first path {paths.get(0)} num paths {paths.len()}");
  }

  maybe_found_program_path Opt<Path> = None<Path>();
  if (Path(relative_program).exists()) {
    set maybe_found_program_path = Some(Path(relative_program));
  } else {
    i = 0;
    while (i < paths.len() and maybe_found_program_path.isEmpty()) {
      path = paths.get(i);
      possible_program_path = Path(path.str())./(relative_program);
      println("checking " + possible_program_path.str());
      if (possible_program_path.exists()) {
        set maybe_found_program_path = Some(possible_program_path.clone());
      }
      set i = i + 1;
    }
  }

  println("done with FindProgramInPath, found?: {not maybe_found_program_path.isEmpty()}");
  ret maybe_found_program_path;
}

fn PrintCommandLinePart(builder &!StringBuilder, part StrSlice) {
  if (part.has(" ")) {
    builder!.print("\"");
    builder!.print(part.replaceAll("\"", "\\\""));
    builder!.print("\"");
  } else {
    builder!.print(part);
  }
}

fn Subprocess(relative_program str, args &List<StrSlice>) Result<Subprocess, str> {
  paths = get_env_var("PATH").split(":");

  maybe_program_path = FindProgramInPath(relative_program);

  if (maybe_program_path.isEmpty()) {
    panic("Unable to find program {relative_program}.");
  }
  program_path = (maybe_program_path).get();
  if (program_path.is_dir()) {
    panic("Unable to execute {relative_program}, is a directory.");
  }

  command_str_builder = StringBuilder();
  command_str_builder!.PrintCommandLinePart(program_path.str().slice());

  cmdlist! = List<str>();
  cmdlist!.add(program_path.str());
  each (&args) (arg){
    command_str_builder!.print(" ");
    command_str_builder!.PrintCommandLinePart(arg);
    cmdlist!.add(arg.str());
  }

  command_str = command_str_builder.str();
  println("Starting command: " + command_str);

  cmd_array = cmdlist.toImmArray();

  handle = launch_command(cmd_array);
  if (handle == 0i64) {
    ret Err<Subprocess, str>("Failed to create command!");
  }

  retval = Subprocess(command_str, handle);
  println("Started command!");
  ret Ok<Subprocess, str>(retval);
}

fn consume_and_join<StdoutConsumer, StderrConsumer>(
  self Subprocess,
  stdout_consumer StdoutConsumer,
  stderr_consumer StderrConsumer)
int {
  println("in consume_and_join");
  running = true;
  while (running) {
    stdout_consumed_anything = false;
    stdout_consuming = true;
    while (stdout_consuming) {
      println("doing read_stdout");
      s = self.read_stdout(1000);
      println("got some stdout");
      if (s.len() > 0) {
        (&!stdout_consumer)(s);
        set stdout_consumed_anything = true;
      } else {
        set stdout_consuming = false;
      }
    }

    stderr_consumed_anything = false;
    stderr_consuming = true;
    while (stderr_consuming) {
      println("doing read_stderr");
      s = self.read_stderr(1000);
      println("got some stderr");
      if (s.len() > 0) {
        (&!stderr_consumer)(s);
        set stderr_consumed_anything = true;
      } else {
        set stderr_consuming = false;
      }
    }

    if (not stdout_consumed_anything and not stderr_consumed_anything and not self.alive()) {
      println("stopping loop");
      set running = false;
    }
  }
  println("done consume_and_join");

  ret join(self);
}

fn print_and_join(self Subprocess) int {
  println("in print_and_join");
  x = consume_and_join(
    self,
    &!(stdout_chunk){
      println("reading stdout chunk");
      print(stdout_chunk);
    },
    &!(stderr_chunk){
      println("reading stderr chunk");
      print(stderr_chunk);
    });
  println("done print_and_join");
  ret x;
}

struct ExecResult {
  return_code int;
  stdout str;
  stderr str;
}

fn capture_and_join(self Subprocess) ExecResult {
  stdout_builder = StringBuilder();
  stderr_builder = StringBuilder();
  return_code =
      consume_and_join(
          self,
          &!(stdout_chunk){ stdout_builder!.print(stdout_chunk); },
          &!(stderr_chunk){ stderr_builder!.print(stderr_chunk); });
  ret ExecResult(return_code, stdout_builder.str(), stderr_builder.str());
}

fn join(self Subprocess) int {
  println("in join");
  status = join(self.handle);
  println("calling destroy");
  destroy(self.handle);
  println("done join");
  ret status;
}

fn alive(self &Subprocess) bool {
  ret alive(self.handle);
}

fn read_all_stdout(self &Subprocess) str {
  builder = StringBuilder();

  running = true;
  while (running) {
    s = self.read_stdout(1000);
    println("Got some stdout, len {s.len()} alive {self.alive()}");
    builder!.print(s);
    if (s.len() == 0 and not self.alive()) {
      set running = false;
    }
  }

  ret builder.str();
}

fn read_stdout(self &Subprocess, len int) str {
  ret read_stdout(self.handle, len);
}
fn read_stderr(self &Subprocess, len int) str {
  ret read_stderr(self.handle, len);
}

fn get_env_var(name str) str extern;
fn launch_command(args Array<imm,final,str>) i64 extern;
fn write_stdin(cmd i64, s str) extern;
fn read_stdout(cmd i64, len int) str extern;
fn read_stderr(cmd i64, len int) str extern;
fn join(cmd i64) int extern;
fn alive(cmd i64) bool extern;
fn destroy(cmd i64) extern;
